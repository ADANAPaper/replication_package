id,text_to_show,is_clone_of
1,"final float scale = getContext().getResources().getDisplayMetrics().density;int pixels = (int) (dps * scale + 0.5f);;",59916
2,"public static int dip(Context context, int pixels) {   float scale = context.getResources().getDisplayMetrics().density;   return (int) (pixels * scale + 0.5f);};",59916
3,"final float scale = getResources().getDisplayMetrics().density;;",59916
4,"private int pixelsToDips(int pixels){    final float scale = context.getResources().getDisplayMetrics().density;    return (int) (pixels / scale + 0.5f);};",59916
5,"getResources().getDisplayMetrics().density;webView.getScale();",59916
6,"public int getDip(int pixel){        float scale = getBaseContext().getResources().getDisplayMetrics().density;        return (int) (pixel * scale + 0.5f); };",59916
7,"float scale = getResources().getDisplayMetrics().scaledDensity;;",59916
8,"int pixel = 120;final float scale = getResources().getDisplayMetrics().density;int dip = (int) (pixel* scale + 0.5f);;",59916
9,"public static int dpToPixels(Context context, float dp) {    final float scale = context.getResources().getDisplayMetrics().density;    return (int) (dp * scale + 0.5f);};",59916
10,"String deviceId;    final TelephonyManager mTelephony = (TelephonyManager) getSystemService(Context.TELEPHONY_SERVICE);        if (mTelephony.getDeviceId() != null){            deviceId = mTelephony.getDeviceId();          }        else{            deviceId = Secure.getString(getApplicationContext().getContentResolver(),   Secure.ANDROID_ID);          };",45242
11,"import android.provider.Settings.Secure;private String android_id = Secure.getString(getContext().getContentResolver(),                                                    Secure.ANDROID_ID);;TelephonyManager telephonyManager = (TelephonyManager)getSystemService(Context.TELEPHONY_SERVICE);  telephonyManager.getDeviceId();;",45242
12,"TelephonyManager telephonyManager = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);String deviceId;if (telephonyManager.getDeviceId() != null)    deviceId = telephonyManager.getDeviceId(); //*** use for mobileselse {    deviceId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);}return deviceId;;",45242
13,"public String getIMEI(Activity activity) {    TelephonyManager telephonyManager = (TelephonyManager) activity.getSystemService(Context.TELEPHONY_SERVICE);    return telephonyManager.getDeviceId();};public String getDeviceUniqueID(Activity activity){    String device_unique_id = Secure.getString(activity.getContentResolver(),            Secure.ANDROID_ID);    return device_unique_id;};",45242
14,"public String getRealPathFromURI(Uri contentUri) {     String[] proj = { MediaStore.Audio.Media.DATA };     Cursor cursor = managedQuery(contentUri, proj, null, null, null);     int column_index = cursor.getColumnIndexOrThrow(MediaStore.Audio.Media.DATA);     cursor.moveToFirst();     return cursor.getString(column_index);};",56910
15,"public String getRealPathFromURI(Uri contentUri) {    String[] proj = { MediaStore.Images.Media.DATA };    Cursor cursor = managedQuery(contentUri, proj, null, null, null);    int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);    cursor.moveToFirst();    return cursor.getString(column_index);};",56910
16,"public String getRealPathFromURI(Uri contentUri) {        String [] proj = {MediaStore.Images.Media.DATA};        Cursor cursor = managedQuery( contentUri,                        proj, null, null, null);        int columnIndex = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);        cursor.moveToFirst();        return cursor.getString(columnIndex);    };",56910
17,"String selectedImagePath = getPath(selectedImageUri);private String getPath(Uri uri) {    String[] projection = { MediaStore.Images.Media.DATA };    Cursor cursor = getContentResolver().query(uri, projection, null, null,null);    int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);    cursor.moveToFirst();    return cursor.getString(column_index);};",56910
18,"Uri selectedImage = data.getData();;String[] filePathColumn = { MediaStore.Images.Media.DATA };;Cursor cursor = getContentResolver().query(selectedImage, filePathColumn, null, null, null);;cursor.moveToFirst();;int columnIndex = cursor.getColumnIndex(filePathColumn[0]);;String picturePath = cursor.getString(columnIndex);;",56910
19,"public String getPath(Uri uri) {        if(uri.getScheme().equals(content)){                String[] projection = { MediaStore.Images.Media.DATA };                Cursor cursor = managedQuery(uri, projection, null, null, null);                int column_index = cursor.getColumnIndexOrThrow(                        MediaStore.Images.Media.DATA);                cursor.moveToFirst();                return cursor.getString(column_index);        } else if(uri.getScheme().equals(file)){                File myFile = new File(uri);                return myFile.getAbsolutePath();        }};",56910
20,"Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar)toolbar.setTitleTextColor(Color.WHITE);;",78103
21,"toolbar = (Toolbar) findViewById(R.id.toolbar); toolbar.setTitle(getResources().getString(R.string.app_name)); toolbar.setTitleTextColor(getColor(R.color.white));;",78103
22,"Toolbar myToolbar = (Toolbar) findViewById(R.id.toolbar);        myToolbar.setTitleTextColor(ContextCompat.getColor(getApplicationContext(), R.color.Auth_Background));        setSupportActionBar(myToolbar);;",78103
23,"Toolbar actionBarToolbar = (Toolbar)activity.findViewById(R.id.action_bar);if (actionBarToolbar != null)    actionBarToolbar.setTitleTextColor(Color.RED);;",78103
24,"Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);setSupportActionBar(toolbar);;getSupportActionBar().setTitle(Welcome+ +getUserEmail);;getSupportActionBar().setTitle(Welcome+ +getUserEmail);;Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);setSupportActionBar(toolbar);TextView welcomeTextView = (TextView) toolbar.findViewById(R.id.welcomeText);welcomeTextView.setText(Welcome  + getUserEmail);;",78103
25,"Toolbar toolbar = findViewById(R.id.my_awesome_toolbar);//Get rid of the title drawn by the toolbar automaticallytoolbar.setTitle();TextView toolbarTitle = (TextView) toolbar.findViewById(R.id.toolbar_title);toolbarTitle.setTextColor(Color.BLUE);;",78103
26,"Toolbar toolbar = (Toolbar) getActivity().findViewById(R.id.toolbar);((TextView) toolbar.findViewById(R.id.toolbar_title)).setText(title);;",78103
27,"Toolbar mToolbar = (Toolbar) findViewById(R.id.toolbar_id);            setSupportActionBar(mToolbar);getSupportActionBar().setTitle(My title);;",78103
28,"BitmapFactory.Options options = new BitmapFactory.Options();  options.inSampleSize = 10;  mPhoto = BitmapFactory.decodeFile(mUri.getPath(), options);;",81301
29,"BitmapFactory.Options options = new BitmapFactory.Options();options.inJustDecodeBounds = true;BitmapFactory.decodeFile(path, options);;BitmapFactory.Options options = new BitmapFactory.Options();options.inJustDecodeBounds = false;options.inSampleSize = myInsampleSize;Bitmap output = BitmapFactory.decodeFile(path, options);;",81301
30,"BitmapFactory.Options options = new BitmapFactory.Options();            options.inSampleSize = 2;            bitmap = BitmapFactory.decodeFile(path, options);            image.setImageBitmap(BitmapFactory.decodeFile(picturePath));;",81301
31,"BitmapFactory.Options o2 = new BitmapFactory.Options();o2.inSampleSize = yourSampleSize;Bitmap returnBmp = BitmapFactory.decodeFile(imgFile.getAbsolutePath(), o2);;",81301
32,"BitmapFactory.Options options=new BitmapFactory.Options();options.inSampleSize = 8;Bitmap preview_bitmap=BitmapFactory.decodeStream(is,null,options);;",81301
33,"BitmapFactory.Options options=new BitmapFactory.Options();options.inSampleSize = 8;Bitmap preview_bitmap=BitmapFactory.decodeStream(is,null,options);;",81301
34,"BitmapFactory.Options options = new BitmapFactory.Options();options.inPreferredConfig = Bitmap.Config.ARGB_8888;Bitmap bitmap = BitmapFactory.decodeFile(photoPath, options);;for (int y = 0; y < bitmap.getHeight(); y++) {    for (int x = 0; x < bitmap.getWidth(); x++) {        android.util.Log.v(TAG, bitmap.getPixel(x,y));    }};",81301
35,"Options options = new BitmapFactory.Options();options.inJustDecodeBounds = true;BitmapFactory.decodeFile(path, options);;",81301
36,"public class Img{    String name;    String imgSdCardPath;    int imgResourceValue;};List<Img> imageList;;BitmapFactory.Options options = new BitmapFactory.Options();options.inPreferredConfig = Bitmap.Config.ARGB_8888;Bitmap bitmap = BitmapFactory.decodeFile(photoPath, options);;",81301
37,"webView.setWebViewClient(new WebViewClient() {    @Override    public boolean shouldOverrideUrlLoading(WebView view, String url) {            view.loadUrl(url);            return false;            }    });;",40785
38,"myWebView.setWebViewClient(new WebViewClient() {    @Override    public boolean shouldOverrideUrlLoading(WebView view, String url) {        view.loadUrl(url);        return false;    }});;",40785
39,"webView.loadUrl(YOUR URL);        webView.setWebViewClient(new WebViewClient() {            @Override            public boolean shouldOverrideUrlLoading(WebView view, String url) {                view.loadUrl(url);                return true;            }        });;",40785
40,"webView.setWebViewClient(new WebViewClient() {    @Override    public boolean shouldOverrideUrlLoading(WebView view, String url) {            view.loadUrl(url);            return true;            }    });;",40785
41,"webView.setWebViewClient(new WebViewClient(){    @Override    public boolean shouldOverrideUrlLoading(WebView view, String url){      view.loadUrl(url);      return true;    }});;",40785
42,"public class MyWebViewClient extends WebViewClient {    @Override    public boolean shouldOverrideUrlLoading(WebView view, String url) {        view.loadUrl(url);        return true;    }};webview.setWebViewClient(new MyWebViewClient());;",40785
43,"myWebView.setWebViewClient(new MyWebViewClient());;private class MyWebViewClient extends WebViewClient {        @Override        public boolean shouldOverrideUrlLoading(WebView view, String url) {                view.loadUrl(url);            return true;        }};",40785
44,"public class WebViewController extends WebViewClient {     @Override        public boolean shouldOverrideUrlLoading(WebView view, String url) {            view.loadUrl(url);            return true;        }}webView.setWebViewClient(new WebViewController());;",40785
45,"// workaround so that the default browser doesnt take over   webView.setWebViewClient(new MyWebViewClient()); private class MyWebViewClient extends WebViewClient {            @Override            public boolean shouldOverrideUrlLoading(WebView view, String url) {                view.loadUrl(url);                return true;            }        };",40785
46,"artistAlbumCursor = getContentResolver().query(                MediaStore.Audio.Artists.Albums.ALBUM, null,                MediaStore.Audio.Media.ARTIST+ =?, new String[] {artistChosen},                MediaStore.Audio.Artists.Albums.ALBUM +  ASC);;",68792
47,"NumberFormat nf = NumberFormat.getInstance(); // get instance for your localenf.setMaximumFractionDigits(2); // set decimal placesString s = nf.format(100.0232); // the parameter must be a long or double;",55387
48,"String text = 1,234567;NumberFormat nf_in = NumberFormat.getNumberInstance(Locale.GERMANY);double val = nf_in.parse(text).doubleValue();NumberFormat nf_out = NumberFormat.getNumberInstance(Locale.UK);nf_out.setMaximumFractionDigits(3);String output = nf_out.format(val);;",55387
49,"float f = 1.23456f;    NumberFormat instance = NumberFormat.getInstance();    instance.setMaximumFractionDigits(2);    System.out.println(instance.format(f));;",55387
50,"Intent intent = new Intent(Intent.ACTION_VIEW);intent.setData(Uri.parse(http://www.stackoverflow.com));startActivity(intent);;Intent intent = new Intent(Intent.ACTION_VIEW);intent.setData(Uri.parse(http://www.stackoverflow.com));// Always use string resources for UI text.This says something like Share this photo withString title = getResources().getText(R.string.chooser_title);// Create and start the chooserIntent chooser = Intent.createChooser(intent, title);startActivity(chooser);;",93828
51,"@Overridepublic void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.your_layout);    getWindow().setLayout(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);};",105380
52,"protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.your_layout);        switch();    };",105380
53,"public class Activity1 extends Activity {   @Override   public void onCreate(Bundle savedInstanceState) {       super.onCreate(savedInstanceState);       setContentView(R.layout.layout1);   }};",105380
54,"@Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_final_class);};",105380
55,"@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);};@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.create_new);;",105380
56,"@Overridepublic void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.main);};",105380
57,"@Overrideprotected void onCreate(Bundle savedInstanceState){    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);....};",105380
58,"@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.**activity_main**);};",105380
59,"@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main);...... };",105380
60,"AlarmManager mgr=(AlarmManager)context.getSystemService(Context.ALARM_SERVICE);Intent i=new Intent(context, OnAlarmReceiver.class);PendingIntent pi=PendingIntent.getBroadcast(context, 0, i, 0);mgr.setRepeating(AlarmManager.ELAPSED_REALTIME_WAKEUP, SystemClock.elapsedRealtime(), PERIOD, pi);;",105196
61,"WindowManager.LayoutParams lp = getWindow().getAttributes();lp.screenBrightness = <value from 0 to 1>;getWindow().setAttributes(lp);;",37361
62,"WindowManager.LayoutParams lp = getWindow().getAttributes();lp.screenBrightness = 100 / 100.0f;getWindow().setAttributes(lp);;",37361
63,"// Make the screen full bright for this activity.WindowManager.LayoutParams lp = getWindow().getAttributes();        lp.screenBrightness = 1.0f;        getWindow().setAttributes(lp);;",37361
64,"WindowManager.LayoutParams lp = dialog.getWindow().getAttributes();  lp.dimAmount=1.0f;dialog.getWindow().setAttributes(lp);  dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);;",37361
65,"WindowManager.LayoutParams lp = dialog.getWindow().getAttributes();lp.dimAmount=0.0f;dialog.getWindow().setAttributes(lp);dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);;",37361
66,"WindowManager.LayoutParams lp = dialog.getWindow().getAttributes();  lp.dimAmount=0.0f;  dialog.getWindow().setAttributes(lp);  dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);;",37361
67,"WindowManager.LayoutParams lparams = getWindow().getAttributes();  lparams.dimAmount=1.0f; dialog.getWindow().setAttributes(lparams);;",37361
68,"Intent intent = new Intent(Intent.ACTION_VIEW);    Uri uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_URI, String.valueOf(contactID));    intent.setData(uri);context.startActivity(intent);;",95099
69,"Intent contViewIntent = new Intent(Intent.ACTION_VIEW);        Uri uri = Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_URI,phn_user.getId());;",95099
70,"Uri uri = Uri.withAppendedPath(MediaStore.Audio.Media.INTERNAL_CONTENT_URI, 1);   Intent it = new Intent(Intent.ACTION_VIEW, uri);   startActivity(it);;Intent intent = new Intent(android.intent.action.MUSIC_PLAYER);startActivity(intent);;",95099
71,"ContentValues values = new ContentValues();values.put(v2_COLUMN, v2_new);    // New value, calculateddb.update(TABLE_name, values, _id=?, new String[]{id});;",46810
72,"ContentValues values = new ContentValues();values.put(column_1, value_1);;",46810
73,"public int update (String table, ContentValues values, String whereClause, String[] whereArgs);;SQLiteDatabase db = this.getWritableDatabase();  ContentValues values = new ContentValues(); values.put(your column name, updated email); String selection = id=?; String[] selectionArgs = {your row id}; // finally  db.update(your table name, values, selection,selectionArgs);;",46810
74,"ContentValues values = new ContentValues();for(int i = 0; i<=5; i++) {    values.put(COLUMN_NAME, i);    values.put(COLUMN_NAME, 0);    db.insert(TABLE_NAME, null, values);};",46810
75,"ContentValues values=new ContentValues();values.put(name,aaa);values.put(publisher,ppp);values.put(price,111);int id=sqdb.update(table_name,values,bookid=5 and booktype=comic,null);;",46810
76,"public int updateAllName(String oldName, String newName) {    ContentValues values = new ContentValues();    values.put(CATEGORY_COLUMN_NAME, newName);    return Db.update(TABLE_NAME, values, CATEGORY_COLUMN_NAME +  =  + oldName + , null);};public int updateAllPro(String oldPro, String newPro) {    ContentValues values = new ContentValues();    values.put(CATEGORY_COLUMN_PRO, newName);    return Db.update(TABLE_NAME, values, CATEGORY_COLUMN_PRO +  =  + oldPro + , null);};",46810
77,"public static int updateSmsStatus(Uri smsUri, int status, int delivery_status) {    ContentValues values = new ContentValues();    values.put(status, status);    values.put(delivery_status, delivery_status);    return G.getContext().getContentResolver().update(smsUri, values, null, null);};",46810
78,"Uri contactUri;ContentValues values = new ContentValues();values.put(ContactsContract.Contacts.CUSTOM_RINGTONE,     newRingtoneUri.toString());context.getContentResolver().update(contactUri, values, where, args);;",46810
79,"ContentValues values = new ContentValues();values.put(Telephony.Sms.READ, 1);getContentResolver().update(Telephony.Sms.Inbox.CONTENT_URI,     values, Telephony.Sms.READ + =0, null);;",46810
80,"textViewField.setOnLongClickListener(new OnLongClickListener() {        @Override        public boolean onLongClick(View v) {            // TODO Auto-generated method stub            return false;        }    });;",57849
81,"public static class MyClickListener1 implements OnClickListener{    Activity mActivity;    MyClickListener1(Acivity activity){      mActivity=activity;    }    @Override    public void onClick(View v) {            //do something    }}public static class MyClickListener2 implements OnClickListener{    @Override    public void onClick(View v) {            //do something    }};btn.setOnClickListener(new MyClickListener1(this));btn.setOnClickListener(new MyClickListener2());;OnClickListener listener1 = new MyClickListener1(this);OnClickListener listener2 = new MyClickListener2();btn.setOnClickListener(listener1);btn.setOnClickListener(listener2);;btn.setTag(listener1);btn.setOnClickListener(listener1);;OnClickListener old_listener = (OnClickListenr)btn.getTag();;",57849
82,"if (android.os.Build.VERSION.SDK_INT>=11) {   getWindow().setFlags(        WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED,        WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);};",51955
83,"if(android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB){     view.setLayerType(View.LAYER_TYPE_HARDWARE, null);};if(android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.HONEYCOMB){     view.setLayerType(View.LAYER_TYPE_SOFTWARE, null);};",51955
84,"final AlertDialog alert = builder.create();alert.setOnShowListener(new DialogInterface.OnShowListener() {    @Override    public void onShow(DialogInterface dialog) {        Button btnPositive = alert.getButton(Dialog.BUTTON_POSITIVE);        btnPositive.setTextSize(TEXT_SIZE);        Button btnNegative = alert.getButton(Dialog.BUTTON_NEGATIVE);        btnNegative.setTextSize(TEXT_SIZE);    }});return alert;;",60015
85,"final AlertDialog alert = builder.create();alert.setOnShowListener(new DialogInterface.OnShowListener() {@Overridepublic void onShow(DialogInterface dialog) {    Button btnPositive = alert.getButton(Dialog.BUTTON_POSITIVE);    btnPositive.setTextSize(desired font size);    Button btnNegative = alert.getButton(Dialog.BUTTON_NEGATIVE);    btnNegative.setTextSize(desired font size);  }});return alert;;",60015
86,"final AlertDialog alert= builder.create();alert.setOnShowListener(new DialogInterface.OnShowListener() {    @Override    public void onShow(DialogInterface dialog) {        float textSize = 15.0f;        Button positive = alert.getButton(AlertDialog.BUTTON_POSITIVE);        positive.setTextSize(TypedValue.COMPLEX_UNIT_DIP, textSize);        Button neutral = alert.getButton(AlertDialog.BUTTON_NEUTRAL);        neutral.setTextSize(TypedValue.COMPLEX_UNIT_DIP, textSize);        Button negative = alert.getButton(AlertDialog.BUTTON_NEGATIVE);        negative.setTextSize(TypedValue.COMPLEX_UNIT_DIP, textSize);    }});;",60015
87,"final AlertDialog alertDialog = builder.create();    alertDialog.setOnShowListener(new DialogInterface.OnShowListener() {        @Override        public void onShow(DialogInterface dialog) {            Button yesButton = alertDialog.getButton(AlertDialog.BUTTON_POSITIVE);            Button noButton = alertDialog.getButton(AlertDialog.BUTTON_NEGATIVE);            yesButton.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);            yesButton.setTypeface(/* your type face */);        }    });    alertDialog.show();;",60015
88,"mDialog(button.getText().toString);;public mDialog(String name){ AlertDialog dialog = new AlertDialog.Builder(context).create(); dialog.setTitle(name);;",60015
92,"getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent);if(groupPosition == x)    drawableRight = null;//set compoundDrawable for whatever view you are using.;",88731
93,"IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);Intent batteryStatus = context.registerReceiver(null, ifilter);// Are we charging / charged?int status = batteryStatus.getIntExtra(BatteryManager.EXTRA_STATUS, -1);boolean isCharging = status == BatteryManager.BATTERY_STATUS_CHARGING ||                 status == BatteryManager.BATTERY_STATUS_FULL;// How are we charging?int chargePlug = batteryStatus.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1);boolean usbCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_USB;boolean acCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_AC;;int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1);float batteryPct = level / (float)scale;;",78678
94,"final IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);    Intent batteryStatus = this.registerReceiver(null, ifilter);    int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);;",78678
95,"registerReceiver(batteryChangeReceiver, new IntentFilter(    Intent.ACTION_BATTERY_CHANGED)); // register in activity or servicepublic class BatteryChangeReceiver extends BroadcastReceiver {    int scale = -1;    int level = -1;    int voltage = -1;    int temp = -1;    @Override    public void onReceive(Context context, Intent intent) {        level = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);        scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);        temp = intent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, -1);        voltage = intent.getIntExtra(BatteryManager.EXTRA_VOLTAGE, -1);    }}unregisterReceiver(batteryChangeReceiver);//unregister in the activity or service;Intent BATTERYintent = this.registerReceiver(null, new IntentFilter(        Intent.ACTION_BATTERY_CHANGED));int level = BATTERYintent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);Log.v(null, LEVEL + level);;",78678
96,"BroadcastReceiver batteryLevelReceiver = new BroadcastReceiver() {        public void onReceive(Context context, Intent intent) {            context.unregisterReceiver(this);            int rawlevel = intent.getIntExtra(level, -1);            int scale = intent.getIntExtra(scale, -1);            int level = -1;            if (rawlevel >= 0 && scale > 0) {                level = (rawlevel * 100) / scale; /* This is your battery level */             }         }    };    IntentFilter batteryLevelFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);    registerReceiver(batteryLevelReceiver, batteryLevelFilter);};",78678
97,"Intent bat = loader.registerReceiver(null, new        IntentFilter(Intent.ACTION_BATTERY_CHANGED));int level = bat.getIntExtra(level, 0);int scale = bat.getIntExtra(scale, 100);return level * 100 / scale;;",78678
98,"private void batteryLevel() {        BroadcastReceiver batteryLevelReceiver = new BroadcastReceiver() {            public void onReceive(Context context, Intent intent) {                context.unregisterReceiver(this);                int rawlevel = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);                int scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);                int level = -1;                if (rawlevel >= 0 && scale > 0) {                    level = (rawlevel * 100) / scale;                }                batterLevel.setText(Battery Level Remaining:  + level + %);            }        };        IntentFilter batteryLevelFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);        registerReceiver(batteryLevelReceiver, batteryLevelFilter);    };",78678
99,"Intent battery=registerReceiver(null, new IntentFilter(Intent.ACTION_BATTERY_CHANGED));;",78678
100,"private class BatteryLifeTask extends AsyncTask<Void, Void, Void> {         protected void doInBackground(Void... params) {             // Get the initial battery level            IntentFilter ifilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);            Intent batteryStatus = this.registerReceiver(null, ifilter);            int level = batteryStatus.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);            System.out.println(Initial battery level is:  + level);            int scale = batteryStatus.getIntExtra(BatteryManager.EXTRA_SCALE, -1);            final float batteryPctTemp0 = level / (float) scale;            final float batteryPct0 = batteryPctTemp0 * 100;         }         protected void onPostExecute() {            int waitTime = 60000 * interval; // 1 minute is 60000 miliseconds            Runnable r = new Runnable() {                @Override                public void run(){                   new BatteryLifeTask.execute();                }            };            Handler h = new Handler();            h.postDelayed(r, waitTime);         } };",78678
101,"public void onReceive(Context context, Intent intent) {             context.unregisterReceiver(this);             int currentLevel = intent.getIntExtra(BatteryManager.EXTRA_LEVEL, -1);             int scale = intent.getIntExtra(BatteryManager.EXTRA_SCALE, -1);             int level = -1;             if (currentLevel >= 0 && scale > 0) {                 level = (currentLevel * 100) / scale; // level will returns 99 or 100 when battery is full             }             batteryPercent.setText(Battery Level Remaining:  + level + %);         }     };      IntentFilter batteryLevelFilter = new IntentFilter(Intent.ACTION_BATTERY_CHANGED);     registerReceiver(batteryLevelReceiver, batteryLevelFilter);};",78678
102,"LinearLayout layout = new LinearLayout(this);layout.setOrientation(LinearLayout.VERTICAL);LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(     LinearLayout.LayoutParams.FILL_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);params.setMargins(10, 20, 30, 40);Button button = new Button(this);button.setText(some text);layout.addView(button, params);;",70519
103,"LinearLayout layout = (LinearLayout) findViewById(R.id.layout);Button button = new Button(getApplicationContext());LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,            ViewGroup.LayoutParams.WRAP_CONTENT);button.setText(New Button);button.setLayoutParams(layoutParams);layout.addView(button);;",70519
104,"public abstract class AbstractActivity extends Activity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setRequestedOrientation (ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);    }};",105471
105,"public abstract class AbstractActivity extends Activity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setRequestedOrientation (ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);    }};",105471
106,"@Override    public void onCreate(Bundle savedInstanceState) {          setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); };",105471
107,"@Override public void onCreate(Bundle savedInstanceState) {    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);};",105471
108,"public class AppNameBaseActivity extends AppCompatActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);    }};",105471
109,"@Override    public void onCreate(Bundle savedInstanceState) {          setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT); };setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);;",105471
110,"android:screenOrientation=portrait|landscape;super.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);;protected void onCreate(Bundle savedInstanceState) {    super.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LOCKED);};",105471
111,"public void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);setContentView(R.layout.main);setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);;",105471
112,"@Overridepublic void onCreate(Bundle savedInstanceState) {  setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);};@Overridepublic void onCreate() {    super.onCreate();      registerActivityLifecycleCallbacks(new ActivityLifecycleAdapter() {        @Override        public void onActivityCreated(Activity a, Bundle savedInstanceState) {            a.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);        }    });};",105471
113,"setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);;setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);;public void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);    setContentView(R.layout.main); };",105471
114,"@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);    if (ldpi || mdpi) {        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);    } else if(hdpi || xhdpi) {        setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);    }};",105471
115,"ProgressBar progressBar = (ProgressBar) findViewById(R.id.progress_bar);;progressBar.setVisibility(View.VISIBLE);;progressBar.setVisibility(View.GONE);;",116007
116,"// progress bar    ProgressBar progressBar = (ProgressBar) findViewById(R.id.next_progress_bar);    progressBar.setVisibility(View.VISIBLE);;",116007
117,"ProgressBar progressBar = (ProgressBar) findViewById(R.id.progressBar);progressBar.setVisibility(0);    --visibleprogressBar.setVisibility(4);    --invisibleprogressBar.setVisibility(8);    --gone (like dismiss);",116007
118,"final ProgressBar barProgress = (ProgressBar) findViewById(R.id.progressLoading);originProgress.setVisibility(View.GONE);;",116007
119,"@Override    protected void onPreExecute() {        progressBar = (ProgressBar)findViewById(R.id.progressbar);        progressBar.setVisibility(View.VISIBLE);    };",116007
120,"ProgressBar progressBar = (ProgressBar) findViewById(R.id.progressBar); progressBar.setProgress(50);;",116007
121,"ProgressBar bar = (ProgressBar)findViewById(R.id.progressBar);bar.setProgress(40);;",116007
122,"progressBar = (ProgressBar)findViewById(R.id.progressbar);    progressBar.setProgress(0);    progressBar.setVisibility(View.VISIBLE);    WebView mWebView = (WebView)findViewById(R.id.webkit);    mWebView.setScrollBarStyle(WebView.SCROLLBARS_OUTSIDE_OVERLAY);    mWebView.setWebChromeClient(new WebChromeClient(){    public void onProgressChanged(WebView view, int progress) {         progressBar.setProgress(progress);         if(progress == 100) {             progressBar.setVisibility(View.GONE);          }       }    });;",116007
123,"int time; // 0-60 secondsProgressBar bar = (ProgressBar) findViewById(R.id.progressBar);bar.setProgress((time / 60.0) * 100);;",116007
124,"public void onCreate(final Bundle savedInstanceState) {    mProgress = (ProgressBar) findViewById(R.id.progressBar);    mProgress.setVisibility(View.VISIBLE);    //rest your code       };@Overrideprotected void onStart() {    //your code    mProgress.setVisibility(View.GONE);            super.onStart();};",116007
125,"int viewWidth = 69;int viewHeight = 69;RelativeLayout.LayoutParams newViewParams = new RelativeLayout.LayoutParams(viewWidth, viewHeight);View v = (View)findViewById(R.id.yourView);v.setLayoutParams(newViewParams);;LinearLayout.LayoutParams newViewParams = new LinearLayout.LayoutParams(viewWidth, viewHeight);;",80136
126,"Layout.LayoutParams params = new LinearLayout.LayoutParams(width, height, weight);;",80136
127,"View someView = (View).findViewById(someId):LinearLayout.LayoutParams params = (LinearLayout.LayoutParams)           someView.getLayoutParams();params.height = 130;someView.setLayoutParams(params);;",80136
128,"b.setLayoutParams(    new LinearLayout.LayoutParams(width, height));;",80136
129,"LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(width, height, weight);linearLayout.addView(relativeLayout, params);;",80136
130,"holder.imageView.setLayoutParams(new LinearLayout.LayoutParams(width, height));;",80136
131,"button.setLayoutParams(new LinearLayout.LayoutParams(YOUR WIDTH, YOUR HEIGHT));;",80136
132,"// Gets linearlayoutLinearLayout layout = (LinearLayout)findViewById(R.id.numberPadLayout);// Gets the layout params that will allow you to resize the layoutLayoutParams params = layout.getLayoutParams();// Changes the height and width to the specified *pixels*params.height = 100;params.width = 100;layout.setLayoutParams(params);;int height = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, <HEIGHT>, getResources().getDisplayMetrics());;",80136
133,"LayoutParams params = view.getLayoutParams();int width = params.width;int height = params.height;;",80136
134,"ActivityManager am = (ActivityManager) this.getSystemService(ACTIVITY_SERVICE);    List<ActivityManager.RunningTaskInfo> taskInfo = am.getRunningTasks(1);    Log.d(topActivity, CURRENT Activity :: + taskInfo.get(0).topActivity.getClassName());    ComponentName componentInfo = taskInfo.get(0).topActivity;    componentInfo.getPackageName();;",84783
135,"ActivityManager am = (ActivityManager) getSystemService(ACTIVITY_SERVICE);                // get the info from the currently running task                List< ActivityManager.RunningTaskInfo > taskInfo = am.getRunningTasks(1);                 Log.d(topActivity, CURRENT Activity ::                        + taskInfo.get(0).topActivity.getClassName());                ComponentName componentInfo = taskInfo.get(0).topActivity;                Log.d(topActivity, CURRENT Package ::                        + componentInfo.getPackageName());;",84783
136,"ActivityManager activityManager = (ActivityManager) this.getSystemService(ACTIVITY_SERVICE);//Get the info from the currently running task.List< ActivityManager.RunningTaskInfo > taskInfo = activityManager.getRunningTasks(1); Log.d(TAG, TOP Activity :: + taskInfo.get(0).topActivity.getClassName());;",84783
137,"ActivityManager am = (ActivityManager) this.getSystemService(ACTIVITY_SERVICE); // get the info from the currently running task List< ActivityManager.RunningTaskInfo > taskInfo = am.getRunningTasks(1); Log.d(topActivity, CURRENT Activity :: + taskInfo.get(0).topActivity.getClassName()); ComponentName componentInfo = taskInfo.get(0).topActivity; String packageName = componentInfo.getPackageName();;uses-permission android:name=android.permission.GET_TASKS;",84783
138,"ActivityManager am = (ActivityManager) this.getSystemService(ACTIVITY_SERVICE);List<ActivityManager.RunningTaskInfo> taskInfo = am.getRunningTasks(1);ComponentName componentInfo = taskInfo.get(0).topActivity;String packageName = componentInfo.getPackageName();;",84783
139,"private String getCurrentTopActivity() {        ActivityManager mActivityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);        List<ActivityManager.RunningTaskInfo> RunningTask = mActivityManager.getRunningTasks(1);        ActivityManager.RunningTaskInfo ar = RunningTask.get(0);        return ar.topActivity.getClassName().toString();    };",84783
140,"private String getCurrentTopPackage() {        ActivityManager mActivityManager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);        List<ActivityManager.RunningTaskInfo> RunningTask = mActivityManager.getRunningTasks(1);        ActivityManager.RunningTaskInfo ar = RunningTask.get(0);        return ar.topActivity.getPackageName().toString();    };",84783
141,"PreferenceManager.getDefaultSharedPreferences(this).edit().putInt(your_key, <Your_value>).commit();;PreferenceManager.getDefaultSharedPreferences(this).getInt(your_key, <Default_value>);;",62261
142,"SharedPreferences prefs = getDefaultSharedPreferences(context);;String key = test1_string_pref;String default = returned_if_not_defined;String test1 = prefs.getString(key, default);;SharedPreferences.Edtior editor = prefs.edit(); //Get SharedPref Editoreditor.putString(key, My String);editor.commit();;prefs.edit().putString(key, Value).commit();;",62261
143,"DownloadManager downloadmanager = (DownloadManager) getSystemService(Context.DOWNLOAD_SERVICE);            Uri uri = Uri.parse(http://www.example.com/myfile.mp3);            DownloadManager.Request request = new DownloadManager.Request(uri);            request.setTitle(My File);            request.setDescription(Downloading);            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);            request.setDestinationUri(Uri.parse(file:// + folderName + /myfile.mp3));            downloadmanager.enqueue(request);;",57598
144,"DownloadManager.Request request = new DownloadManager.Request(uri);request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, fileName);request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED); // to notify when download is completerequest.allowScanningByMediaScanner();// if you want to be available from media playersDownloadManager manager = (DownloadManager) getSystemService(DOWNLOAD_SERVICE);manager.enqueue(request);;",57598
145,"String mUrl=your video url;DownloadManager manager = (DownloadManager) getSystemService(DOWNLOAD_SERVICE);Request request = new Request(Uri.parse(mUrl));            request.setDestinationInExternalFilesDir(getApplicationContext(), Environment.DIRECTORY_DOWNLOADS, your_fileName);            request.setNotificationVisibility(Request.VISIBILITY_VISIBLE);            request.setAllowedOverRoaming(false);            request.setAllowedNetworkTypes(DownloadManager.Request.NETWORK_WIFI | DownloadManager.Request.NETWORK_MOBILE);            manager.enqueue(request);;",57598
146,"mWebView.setDownloadListener(new DownloadListener() {    public void onDownloadStart(String url, String userAgent,            String contentDisposition, String mimetype,            long contentLength) {                Request request = new Request( Uri.parse(url));                request.allowScanningByMediaScanner();                request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);                request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS, myPDFfile.pdf);                 DownloadManager dm = (DownloadManager) getSystemService(DOWNLOAD_SERVICE);                dm.enqueue(request);           }});;",57598
147,"DownloadManager.Request request = new DownloadManager.Request(Uri.parse(files_url[position]));            request.setTitle(File Downloading);            request.setDescription(File is being Downloaded...);            request.allowScanningByMediaScanner();            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED);            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE);            String File_name = URLUtil.guessFileName(files_url[position],null, MimeTypeMap.getFileExtensionFromUrl(files_url[position]));            request.setDestinationInExternalPublicDir(Environment.DIRECTORY_DOWNLOADS,File_name)  ;            DownloadManager manager = (DownloadManager) getActivity().getSystemService(Context.DOWNLOAD_SERVICE);            manager.enqueue(request);            Toast.makeText(getActivity(),Downloading,Toast.LENGTH_LONG).show();;",57598
148,"DisplayMetrics displaymetrics = getResources().getDisplayMetrics();int height = displaymetrics.heightPixels;int width = displaymetrics.widthPixels;;image_view.getLayoutParams().height = height/2;;",82024
149,"Display display = getWindowManager().getDefaultDisplay();Point size = new Point();display.getSize(size);int width = size.x;int height = size.y;;DisplayMetrics displaymetrics = new DisplayMetrics();getWindowManager().getDefaultDisplay().getMetrics(displaymetrics);int height = displaymetrics.heightPixels;int wwidth = displaymetrics.widthPixels;;WindowManager wm = (WindowManager) ctx.getSystemService(Context.WINDOW_SERVICE);Display display = wm.getDefaultDisplay();int width = display.getWidth();  // deprecatedint height = display.getHeight();  // deprecated;function getDeviceDimention() {        console.log(Device Dimention using PhoneGap);        console.log(Width =  + window.innerWidth);        console.log(Height =  + window.innerHeight);    };",82024
150,"private void setUpMapIfNeeded() {// Do a null check to confirm that we have not already instantiated the map.if (mMap == null) {    mMap = ((MapFragment) getFragmentManager().findFragmentById(R.id.map)).getMap();    // Check if we were successful in obtaining the map.if (mMap != null) {        // The Map is verified.It is now safe to manipulate the map.}}};",57867
151,"private void setUpMapIfNeeded() {    // Do a null check to confirm that we have not already instantiated the    // map.if (mMap == null) {        FragmentManager mgr = getFragmentManager();        MapFragment mapFragment = (MapFragment)mgr.findFragmentById(R.id.map);        mMap = mapFragment.getMap();        // Check if we were successful in obtaining the map.if (mMap != null) {            // The Map is verified.It is now safe to manipulate the map.setUpMap();        }else{            // check if google play service in the device is not available or out-dated.GooglePlayServicesUtil.isGooglePlayServicesAvailable(this);            // nothing anymore, cuz android will take care of the rest (to remind user to update google play service).}    }};",57867
152,"private void setUpMapIfNeeded() {    // Do a null check to confirm that we have not already instantiated the map.if (mMap == null) {        // Try to obtain the map from the SupportMapFragment.mMap = ((SupportMapFragment) getSupportFragmentManager().findFragmentById(R.id.map)).getMap();        // Check if we were successful in obtaining the map.if (mMap != null) {            setUpMap();        }    }};mMap.addMarker(new MarkerOptions().position(new LatLng(Your_lat, Your_long)).title(Marker));;",57867
153,"@Overridepublic void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {    super.onCreateContextMenu(menu, v, menuInfo);    AdapterContextMenuInfo info = (AdapterContextMenuInfo) menuInfo;    MyObject obj = (MyObject) myListView.getItemAtPosition(info.position);    menu.setHeaderTitle(Selection Options);      menu.add(0, v.getId(), 0, Remove  + obj.name); };",30697
154,"@Overridepublic void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuInfo) {    super.onCreateContextMenu(menu, v, menuInfo);    AdapterContextMenuInfo info = (AdapterContextMenuInfo) menuInfo;    MyObject obj = (MyObject) myListView.getItemAtPosition(info.position);    menu.setHeaderTitle(Selection Options);      menu.add(0, v.getId(), 0, Remove  + obj.name); };",30697
155,"NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);navigationView.setNavigationItemSelectedListener(this);View header=navigationView.getHeaderView(0);/*View view=navigationView.inflateHeaderView(R.layout.nav_header_main);*/name = (TextView)header.findViewById(R.id.username);email = (TextView)header.findViewById(R.id.email);name.setText(personName);email.setText(personEmail);;",94606
156,"listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {    @Override    public void onItemClick(AdapterView<?> parent, View view,                            int position, long id) {    switch (position) {    case 0:        startActivity(new Intent((Activity) context, Activity0.class));        break;    case 1:        startActivity(new Intent((Activity) context, Activity1.class));        break;    case 2:        startActivity(new Intent((Activity) context, Activity2.class));        break;    // etc.}});;",47481
157,"list.setOnItemClickListener(new AdapterView.OnItemClickListener(){        @Override        public void onItemClick(AdapterView<?> parent, View view,                int position, long id) {            Intent intent = new Intent(MainActivity.this,nextActivity.class);            startActivity(intent);        }    });;@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_next);};public class NextActivity extends Activity { };@Overrideprotected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    // What you want to do when the activity is created.};",47481
158,"list1.setOnItemClickListener(new OnItemClickListener() {    public void onItemClick(AdapterView<?> parent, View view,            int position, long id) {         if (position ==items[ITEM_POSITION_HERE])        {          Intent myIntent = new Intent(getApplicationContext(),NextActivity.class);          startActivity(myIntent);      }    }});;",47481
159,"listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {      @Override      public void onItemClick(AdapterView<?> parent, View view, int position, long id) {        Intent intent = null;        switch (position) {          case 0:            intent = new Intent(MainActivity,this, FirstClass.class);            break;          case 1:            intent = new Intent(MainACtivity.this,SecondClass.class);            break;        }        startActivity(intent);      }    });;",47481
160,"listView1.setOnItemClickListener(new ListView.OnItemClickListener(){    public void onItemClick(AdapterView<?> listView, View itemView, int itemPosition, long itemId)    {        Intent launchActivity = new Intent(MyActivity.this, OtherActivity.class);        startActivity(launchActivity);    }});;",47481
161,"listView = (ListView) findViewById(R.id.my_list_view); listView.setAdapter(someAdapter); listView.setOnItemClickListener(new OnItemClickListener() {        public void onItemClick(AdapterView<?> parent, View view, int position, long id) {            switch(position) {            case 0:                 Intent intent = new Intent();                 intent.setClassName(com.test, com.test.SubMenuActivity);                 startActivity(intent);                              break;            case 1:                 // Do something else...                 break;            //...         }    });;",47481
162,"list.setOnItemClickListener(this);;@Overridepublic void onItemClick(AdapterView<?> parent, View view, int position, long id) {    switch(position){        case 0:            Intent firstIntent = new Intent(this, MyClass.class);            startActivity(firstIntentIntent);            break;          case 1:            Intent secondIntent = new Intent(this, MySecondClass.class);            startActivity(secondIntentIntent);                    break;            [... etc...]   }    };",47481
163,"listView.setOnItemClickListener(new OnItemClickListener() {            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                Intent intent;                switch(position) {                    case 0:                        intent = new Intent(getBaseContext(), NeSalla.class);                        break;                    case 1:                        intent = new Intent(getBaseContext(),...);                        break;...                }                startActivity(intent);               }        });;",47481
164,"listView.setOnItemClickListener(new OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position,                    long id) {                if(position == 0){                    Intent intent = new Intent(MainActivity.this, OneRoomActivity.class);                    startActivity(intent);                }               else if(position == 1){                    Intent intent = new Intent(MainActivity.this, DoubleRoomActivity.class);                    startActivity(intent);                }               //Do as above for rest of the list items            }        });;",47481
165,"ListView lv = getListView();  lv.setOnItemClickListener(new OnItemClickListener() {  public void onItemClick(AdapterView<?> listView, View itemView, int itemPosition, long itemId)    {                     Intent launchActivity = new Intent(FirstActivity.this, SecondActivity.class);          startActivity(launchActivity);    }   });;",47481
166,"public Bitmap getBitmapfromUrl(String imageUrl){    try    {        URL url = new URL(imageUrl);        HttpURLConnection connection = (HttpURLConnection) url.openConnection();        connection.setDoInput(true);        connection.connect();        InputStream input = connection.getInputStream();        Bitmap bitmap = BitmapFactory.decodeStream(input);        return bitmap;    } catch (Exception e)    {        // TODO Auto-generated catch block        e.printStackTrace();        return null;    }};",69293
167,"private void openPDF(final String pathToPDF) {    File file = new File(pathToPDF);    Uri path = Uri.fromFile(file);    Intent intent = new Intent(Intent.ACTION_VIEW);    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);    intent.setDataAndType(path, application/pdf);    try {        startActivity(intent);    } catch (ActivityNotFoundException e) {        Toast.makeText(this, Application not found, Toast.LENGTH_SHORT).show();    }};",26208
168,"File file = new File(fileLocation);                if (file.exists()) {                Uri path = Uri.fromFile(file);                Intent intent = new Intent(Intent.ACTION_VIEW);    //Set Intent action view pdf file                intent.setDataAndType(path, application/pdf);      //Set data type                intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);                    try {                    startActivity(intent);                          //Start Activity                } catch (ActivityNotFoundException e) {                    Toast.makeText(OpenPdf.this,                            No Application Available to View PDF,                            Toast.LENGTH_SHORT).show();                }            };",26208
169,"String FILE = Environment.getExternalStorageDirectory().getPath()+/abc.pdf;    File file = new File(FILE);  //file should contain path of pdf file/ Uri path = Uri.fromFile(file); Intent intent = new Intent(Intent.ACTION_VIEW); intent.setDataAndType(path, application/pdf); intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); try {       startActivity(intent);     }      catch (ActivityNotFoundException e)     {            Toast.makeText(this,                 No Application Available to View PDF,                 Toast.LENGTH_SHORT).show();        };",26208
170,"try{ Intent intentUrl = new Intent(Intent.ACTION_VIEW); intentUrl.setDataAndType(uri, application/pdf); intentUrl.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP); mActivity.startActivity(intentUrl);}catch (ActivityNotFoundException e){ Toast.makeText(mActivity, No PDF Viewer Installed, Toast.LENGTH_LONG).show();};",26208
171,"LinearLayout linearLayout = (LinearLayout)findViewById(R.id.textview_container);TextView valueTV = new TextView(this);linearLayout.addView(valueTV);;",83652
172,"LinearLayout lv = (LinearLayout)findViewById(R.id.linear);      TextView tv = new TextView(this);  tv.setLayoutParams(InformationActivity.textViewParams);  tv.setText(String.valueOf(info));  lv.addView(tv );//not InformationActivity.tv just write tv;",83652
173,"LinearLayout linear = new LinearLayout(this);    linear.setOrientation(LinearLayout.VERTICAL);    TextView tv1 = new TextView(this);    tv1.setText(First Text!);    TextView tv2 = new TextView(this);    tv2.setText(Second Text!);    linear.addView(tv1);    linear.addView(tv2);;",83652
174,"LinearLayout mainLinear = new LinearLayout(this);mainLinear.addView(textBox);;textBox.addText(This is the text to add to the text box);;TextView text1=(TextView) findViewById(R.id.NAME);text1.setText(Hello please pick an option below);;",83652
175,"TextView tv;----------------------tv=new TextView(this);   // you take TextView id (R.id.textview1)LinearLayout.LayoutParams Params1 = new LinearLayout.LayoutParams(15,50);tv.setLayoutParams(Params1);   //you take linearlayout and relativelayout.;",83652
176,"LinearLayout ll = (LinearLayout)findViewById(R.id.linearLayout2);        // add text view        TextView tv = new TextView(this);        tv.setText(Dynamic Text!); tv.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT,LayoutParams.WRAP_CONTENT));        ll.addView(tv);;",83652
177,"LinearLayout ll = (LinearLayout)findViewById(R.id.header_1);TextView tv = (TextView)ll.findViewById(R.id.included_text_view);tv.setText(Header Text 1);ll = (LinearLayout)findViewById(R.id.header_2);tv = (TextView)ll.findViewById(R.id.included_text_view);tv.setText(Header Text 2);;",83652
178,"LinearLayout layout = findViewById(r.id.layout);layout.setOrientation(LinearLayout.VERTICAL);;for (int i=0; i<items.size; i++) {    TextView tv = new TextView(context);    tv.setText(items[i].stringName + :  + items[i].value);    layout.addView(tv);};",83652
179,"LinearLayout layout = findViewById(id_linear_layout);((TextView) layout.findViewById(id_textview)).setText(Text);;",83652
180,"import org.apache.http.HttpResponse;import org.apache.http.client.HttpClient;import org.apache.http.client.methods.HttpPost;import org.apache.http.entity.ByteArrayEntity;import org.apache.http.impl.client.DefaultHttpClient;import org.apache.http.params.BasicHttpParams;import org.apache.http.params.HttpConnectionParams;import org.apache.http.params.HttpParams;    try {        int TIMEOUT_MILLISEC = 10000;  // = 10 seconds        HttpParams httpParams = new BasicHttpParams();        HttpConnectionParams.setConnectionTimeout(httpParams,                                                  TIMEOUT_MILLISEC);        HttpConnectionParams.setSoTimeout(httpParams, TIMEOUT_MILLISEC);        HttpClient client = new DefaultHttpClient(httpParams);        HttpPost request = new HttpPost(serverUrl);        request.setEntity(new ByteArrayEntity(            postMessage.toString().getBytes(UTF8)));        HttpResponse response = client.execute(request);    } catch (Exception e) {....    };",108117
181,"getListView().setOnItemClickListener(new OnItemClickListener() {    @Override    public void onItemClick(AdapterView<?> parent, View view, int position,            long id) {        // Handle your click here as you want    }});;",97892
182,"GridLayoutManager manager = new GridLayoutManager(this, 2, GridLayoutManager.VERTICAL, false);manager.setSpanSizeLookup(    new GridLayoutManager.SpanSizeLookup() {        @Override        public int getSpanSize(int position) {             // 2 column size for first row             return (position == 0 ? 2 : 1);        }    });;",98343
183,"//Two items in a rowint spanCount = 2;GridLayoutManager manager = new GridLayoutManager(getActivity(),spanCount);manager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {            @Override            public int getSpanSize(int position) {                return (position == 0 ? spanCount : 1);            }        });;",98343
184,"mLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {@Override    public int getSpanSize(int position) {        switch (mAdapter.getItemViewType(position)) {            case MyAdapter.TYPE_VIEW_PAGER:                return 2;            case MyAdapter.TYPE_IMAGE_VIEW:                return 2;            case MyAdaper.TYPE_NORMAL:                return 1;        }    }});;",98343
185,"GridLayoutManager manager = new GridLayoutManager(this, 10); // 3 cols of 3 + 1 col of 1manager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {  @Override  public int getSpanSize(int position) {    if (position % 4 == 3)       return 1; // Fourth column is 1x    else       return 3; // Remaining columns are 3x  }});recyclerView.setLayoutManager(manager);;",98343
186,"GridLayoutManager layoutManager = new GridLayoutManager(this, 4);layoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {    @Override    public int getSpanSize(int position) {         int mod = position % 6;             if(position == 0 || position == 1)              return 2;         else if(position < 6)              return 1;         else if(mod == 0 || mod == 1)              return 2;         else              return 1;    }});recyclerView.setLayoutManager(layoutManager);;",98343
187,"final int spanCount = 3;    GridLayoutManager glm = new GridLayoutManager(this, spanCount);    recyclerView.setLayoutManager(glm);    glm.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {        @Override        public int getSpanSize(int position) {            // You could also use adapter.getItemViewType(position) and check if            // the type of the view is LONG_VIEW instead of using a modulo            if (position % 10 == 9) {                return spanCount;            } else {                return 1;            }        }    });;",98343
188,"final GridLayoutManager mGridManager = new GridLayoutManager(getActivity(),2);mGridManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {    @Override    public int getSpanSize(int position) {        return adapter.isPositionHeader(position) ? mGridManager.getSpanCount() : 1;    }});recyclerView.setLayoutManager(mGridManager);recyclerView.setAdapter(adapter);;public boolean isPositionHeader(int position) {    if(ADD_SOURCE_BUTTON == getItemViewType(position)){        return true;    } else {        return false;    }};",98343
189,"AlphaAnimation alpha = new AlphaAnimation(0.7F, 0.7F);alpha.setDuration(0); // Make animation instantalpha.setFillAfter(true); // Tell it to persist after the animation endsview.startAnimation(alpha);;",48970
190,"alphaDown = new AlphaAnimation(1.0f, 0.3f);    alphaUp = new AlphaAnimation(0.3f, 1.0f);    alphaDown.setDuration(1000);    alphaUp.setDuration(500);    alphaDown.setFillAfter(true);    alphaUp.setFillAfter(true);    analyse.startAnimation(alphaUp);;",48970
191,"AlphaAnimation alpha = new AlphaAnimation(0.5F, 0.5F);alpha.setDuration(0); // Make animation instantalpha.setFillAfter(true); // Tell it to persist after the animation ends// And then on your layoutyourLayout.startAnimation(alpha);;",48970
192,"Button btn = (Button) findViewById(R.id.button);  float alpha = 0.45f;AlphaAnimation alphaUp = new AlphaAnimation(alpha, alpha);alphaUp.setFillAfter(true);btn.startAnimation(alphaUp);;",48970
193,"Uri uri = Uri.parse(URL); //Declare your url here.VideoView mVideoView  = (VideoView)findViewById(R.id.videoview)mVideoView.setMediaController(new MediaController(this));       mVideoView.setVideoURI(uri);mVideoView.requestFocus();mVideoView.start();;String LINK = type_here_the_link;  VideoView mVideoView  = (VideoView) findViewById(R.id.videoview);  MediaController mc = new MediaController(this);  mc.setAnchorView(videoView);  mc.setMediaPlayer(videoView);  Uri video = Uri.parse(LINK);  mVideoView.setMediaController(mc);  mVideoView.setVideoURI(video);  mVideoView.start();;",113623
194,"ConnectivityManager dataManager;dataManager  = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);Method dataMtd = ConnectivityManager.class.getDeclaredMethod(setMobileDataEnabled, boolean.class);dataMtd.setAccessible(true);dataMtd.invoke(dataManager, true);        //True - to enable data connectivity.;",33717
195,"WifiManager wifiManager ;wifiManager  = (WifiManager)this.getSystemService(this.WIFI_SERVICE);wifiManager.setWifiEnabled(true);        //True - to enable WIFI connectivity.;ConnectivityManager dataManager;dataManager  = (ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);Method dataMtd = ConnectivityManager.class.getDeclaredMethod(setMobileDataEnabled, boolean.class);dataMtd.setAccessible(true);dataMtd.invoke(dataManager, true);        //True - to enable data connectivity.;",33717